{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Device } from './device.interface';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar DeviceService = /** @class */function () {\n  function DeviceService(http, host) {\n    this.http = http;\n    this.host = host;\n    this.devices$$ = new BehaviorSubject([{\n      lastTelemetry: {}\n    }, {\n      lastTelemetry: {}\n    }]);\n    this.loading$$ = new BehaviorSubject(true);\n  }\n  Object.defineProperty(DeviceService.prototype, \"loading$\", {\n    get: function () {\n      return this.loading$$.asObservable();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DeviceService.prototype, \"devices$\", {\n    get: function () {\n      return this.devices$$.asObservable();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  DeviceService.prototype.getAllDevice = function () {\n    var _this = this;\n    this.loading$$.next(true);\n    this.http.get(\"https://\".concat(this.host, \"/RoomEnvironmentMonitor/api/device/list\")).pipe(take(1), map(function (resp) {\n      return (resp || {\n        devices: []\n      }).devices;\n    }), map(function (data) {\n      return data.map(Device.fromApi);\n    })).subscribe(function (devices) {\n      _this.loading$$.next(false);\n      _this.devices$$.next(devices);\n    });\n  };\n  DeviceService.ɵfac = function DeviceService_Factory(t) {\n    return new (t || DeviceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('IOT-DEVICE-GCF-HOST'));\n  };\n  DeviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DeviceService,\n    factory: DeviceService.ɵfac\n  });\n  return DeviceService;\n}();\nexport { DeviceService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}