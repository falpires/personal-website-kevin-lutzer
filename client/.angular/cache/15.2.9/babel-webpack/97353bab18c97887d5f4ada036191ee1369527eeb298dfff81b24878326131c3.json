{"ast":null,"code":"import { AngularFirestore } from '@angular/fire/firestore';\nimport { map, startWith, filter } from 'rxjs/operators';\nimport { MODEL } from './project.model';\nimport * as i0 from \"@angular/core\";\nvar DEFAULT_PROJECT = {\n  name: '',\n  tagline: '',\n  description: '',\n  imageUrl: '',\n  githubUrl: '',\n  tags: [],\n  startDate: null,\n  endDate: null\n};\nvar DEFAULT_FRAME = [DEFAULT_PROJECT, DEFAULT_PROJECT, DEFAULT_PROJECT, DEFAULT_PROJECT];\nvar ProjectService = /** @class */function () {\n  function ProjectService(angularFirestore) {\n    this.angularFirestore = angularFirestore;\n    this._collection = this.angularFirestore.collection(MODEL);\n  }\n  Object.defineProperty(ProjectService.prototype, \"projects$\", {\n    get: function () {\n      return this._collection.valueChanges().pipe(startWith(DEFAULT_FRAME));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ProjectService.prototype.latestProject$ = function () {\n    return this._collection.valueChanges().pipe(filter(Boolean), map(function (pjs) {\n      return (pjs || []).reduce(function (prev, curr) {\n        if (prev.startDate > curr.startDate) {\n          return prev;\n        }\n        return curr;\n      }, {\n        startDate: new Date(null)\n      });\n    }));\n  };\n  Object.defineProperty(ProjectService.prototype, \"isLoading$\", {\n    get: function () {\n      return this.projects$.pipe(map(function (v) {\n        return v === DEFAULT_FRAME;\n      }));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ProjectService.ɵfac = function ProjectService_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n  ProjectService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProjectService,\n    factory: ProjectService.ɵfac\n  });\n  return ProjectService;\n}();\nexport { ProjectService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}